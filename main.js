!function(){"use strict";function e(e,t){const a=e+1;let s="";return a<=t&&(s+="top-"),a>t**2-t&&(s+="bottom-"),Number.isInteger((a-1)/t)?s+="left":Number.isInteger(a/t)?s+="right":s=s.slice(0,-1),""!==s?s:"center"}function t(e,t,a){const s=Array(a**2);s.fill(0);const i=s.map(((e,t)=>({x:t%a,y:Math.floor(t/a)}))),r=i[e],l=i[t];return{diffX:Math.abs(r.x-l.x),diffY:Math.abs(r.y-l.y)}}function a(e,a,s,i=8){const r=t(e,a,i);return r.diffX<=s&&r.diffY<=s&&(0===r.diffY||0===r.diffX||r.diffX===r.diffY)}function s(e,a,s,i=8){const r=t(e,a,i);return r.diffX<=s&&r.diffY<=s}var i="prairie";class r{constructor(e,t="generic"){if("Character"===new.target.name)throw new Error("You can't create Character class directly");this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t}damage(e){this.health>0?this.health<=e?this.health=0:this.health-=e:this.health=0}}class l{constructor(e,t){if(!(e instanceof r))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}function c(e,t=8){const a=[...Array(t**2).keys()];let s;return s="opponent"===e?a.filter((e=>e%t==6||e%t==7)):a.filter((e=>e%t==0||e%t==1)),s}function*n(e,t){for(;;){const a=Math.floor(e.length*Math.random()),s=Math.floor(Math.random()*t)+1;yield new e[a](s)}}function h(e,t,a){const s=[],i=c("player",8),r=c("opponent",8);for(let c=0;c<a;c+=1){const a=n(e,t).next().value;let c,h;a.isGoodCharacter?(c=Math.floor(i.length*Math.random()),h=i[c],i.splice(c,1)):(c=Math.floor(r.length*Math.random()),h=r[c],r.splice(c,1)),s.push(new l(a,h))}return s}class o extends r{constructor(e){super(e,"bowman"),this.attack=25,this.defence=25,this.moveCell=2,this.attackCell=2,this.isGoodCharacter=!0}}class d extends r{constructor(e){super(e,"daemon"),this.attack=10,this.defence=40,this.moveCell=1,this.attackCell=4,this.isGoodCharacter=!1}}class m extends r{constructor(e){super(e,"magician"),this.attack=10,this.defence=40,this.moveCell=1,this.attackCell=4,this.isGoodCharacter=!0}}class C extends r{constructor(e){super(e,"swordsman"),this.attack=40,this.defence=10,this.moveCell=4,this.attackCell=1,this.isGoodCharacter=!0}}class p extends r{constructor(e){super(e,"undead"),this.attack=40,this.defence=10,this.moveCell=4,this.attackCell=1,this.isGoodCharacter=!1}}class f extends r{constructor(e){super(e,"vampire"),this.attack=25,this.defence=25,this.moveCell=2,this.attackCell=2,this.isGoodCharacter=!1}}class u{constructor(){this.playerTeam=[o,C,m],this.opponentTeam=[d,p,f]}}class g{constructor(e,t){this.playerTeam=e,this.opponentTeam=t,this.playerMove=!0}static from(e){return null}}var v="pointer",y="crosshair",L="not-allowed";const E=new class{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const a=document.createElement("div");a.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${a.character.health}%`,i.appendChild(r),s.appendChild(i),e.appendChild(s)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e,t="yellow"){this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}};E.bindToDOM(document.querySelector("#game-container"));const S=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),w=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.playerTeam=h((new u).playerTeam,1,3),this.opponentTeam=h((new u).opponentTeam,1,3),this.gameState=new g(this.playerTeam,this.opponentTeam)}init(){this.gamePlay.drawUi(i),this.gamePlay.redrawPositions([...this.playerTeam,...this.opponentTeam]),this.enterOnCell(),this.leaveOnCell(),this.clickOnCell()}onCellClick(e){if(this.gameState.selectedCharacter&&this.gameState.selectedCharacter.position===e)this.gamePlay.deselectCell(e),this.gameState.selectedCharacter=null;else{const t=this.hasCharacter(e),i=this.getCharacter(e);if(t&&i.character.isGoodCharacter&&(this.gameState.selectedCharacter=i,this.gamePlay.cells.forEach((e=>{e.classList.remove(...Array.from(e.classList).filter((e=>e.startsWith("selected"))))})),this.gamePlay.selectCell(e),this.gamePlay.setCursor(v)),this.gameState.selectedCharacter&&!t){const t=this.gameState.selectedCharacter.character.moveCell;a(this.gameState.selectedCharacter.position,e,t)&&(this.gameState.playerTeam=this.filterTeam(this.gameState.selectedCharacter),this.gameState.playerTeam=[...this.gameState.playerTeam,this.gameState.selectedCharacter],this.gameState.selectedCharacter.position=e,this.endMove())}if(this.gameState.selectedCharacter&&t){const t=this.gameState.selectedCharacter.character.attackCell,a=this.gameState.selectedCharacter.position;s(a,e,t)&&a!==e&&this.attackCharacter(this.gameState.selectedCharacter,i)}}}onCellEnter(e){const t=this.hasCharacter(e),i=this.getCharacter(e);if(t){const t=`ðŸŽ–${i.character.level} ðŸ—¡${i.character.attack} ðŸ›¡${i.character.defence} ðŸ’“${i.character.health}`;this.gamePlay.showCellTooltip(t,e)}if(this.gameState.selectedCharacter&&!t){const t=this.gameState.selectedCharacter.character.moveCell;a(this.gameState.selectedCharacter.position,e,t)&&(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor(v))}if(t&&this.gameState.selectedCharacter&&!i.character.isGoodCharacter){const t=this.gameState.selectedCharacter.character.attackCell;s(this.gameState.selectedCharacter.position,e,t)?(this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(y)):this.gamePlay.setCursor(L)}}onCellLeave(e){this.gamePlay.setCursor(v),this.gamePlay.cells.forEach((e=>e.classList.remove("selected-green","selected-red"))),this.gamePlay.hideCellTooltip(e)}hasCharacter(e){return[...this.playerTeam,...this.opponentTeam].some((t=>t.position===e))}getCharacter(e){let t=this.playerTeam.find((t=>t.position===e));return t||(t=this.opponentTeam.find((t=>t.position===e))),t}enterOnCell(){this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this))}leaveOnCell(){this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this))}clickOnCell(){this.gamePlay.addCellClickListener(this.onCellClick.bind(this))}filterTeam(e){let t;return t=e.character.isGoodCharacter?this.gameState.playerTeam.filter((t=>t.position!==e.position)):this.gameState.opponentTeam.filter((t=>t.position!==e.position)),t}endMove(){this.gamePlay.cells.forEach((e=>{e.classList.remove(...Array.from(e.classList).filter((e=>e.startsWith("selected"))))})),this.gamePlay.redrawPositions([...this.gameState.playerTeam,...this.gameState.opponentTeam]),this.gameState.playerMove?this.gameState.playerMove=!1:this.gameState.playerMove=!0}attackCharacter(e,t){if(!e||!t)return;const a=Math.floor(Math.max(e.character.attack-t.character.defence,.1*e.character.attack));t.character.isGoodCharacter?this.gameState.playerTeam=this.filterTeam(t):this.gameState.opponentTeam=this.filterTeam(t),t.character.damage(a),t.character.health>0&&(t.character.isGoodCharacter,this.gameState.playerTeam=[...this.gameState.playerTeam,t]),this.gamePlay.showDamage(t.position,a).then((()=>{this.clickOnCell()})).then((()=>{this.endMove()}))}}(E,S);w.init()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,