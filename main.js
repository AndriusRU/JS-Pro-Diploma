!function(){"use strict";function e(e,t){const s=e+1;let a="";return s<=t&&(a+="top-"),s>t**2-t&&(a+="bottom-"),Number.isInteger((s-1)/t)?a+="left":Number.isInteger(s/t)?a+="right":a=a.slice(0,-1),""!==a?a:"center"}class t{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const s=document.createElement("div");s.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),s.addEventListener("mouseenter",(e=>this.onCellEnter(e))),s.addEventListener("mouseleave",(e=>this.onCellLeave(e))),s.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(s)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const s of e){const e=this.boardEl.children[s.position],a=document.createElement("div");a.classList.add("character",s.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=s.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${s.character.health}%`,i.appendChild(r),a.appendChild(i),e.appendChild(a)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e,t="yellow"){this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((s=>{const a=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),a.appendChild(i),i.addEventListener("animationend",(()=>{a.removeChild(i),s()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}var s="prairie";class a{constructor(e,t="generic"){if("Character"===new.target.name)throw new Error("You can't create Character class directly");this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t}}class i{constructor(e,t){if(!(e instanceof a))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}function r(e,t=8){const s=[...Array(t**2).keys()];let a;return a="opponent"===e?s.filter((e=>e%t==6||e%t==7)):s.filter((e=>e%t==0||e%t==1)),a}function*l(e,t){for(;;){const s=Math.floor(e.length*Math.random()),a=Math.floor(Math.random()*t)+1;yield new e[s](a)}}function n(e,t,s){const a=[],n=r("player",8),c=r("opponent",8);for(let r=0;r<s;r+=1){const s=l(e,t).next().value;let r,o;s.isGoodCharacter?(r=Math.floor(n.length*Math.random()),o=n[r],n.splice(r,1)):(r=Math.floor(c.length*Math.random()),o=c[r],c.splice(r,1)),a.push(new i(s,o))}return a}class c extends a{constructor(e){super(e,"bowman"),this.attack=25,this.defence=25,this.isGoodCharacter=!0}}class o extends a{constructor(e){super(e,"daemon"),this.attack=10,this.defence=40,this.isGoodCharacter=!1}}class h extends a{constructor(e){super(e,"magician"),this.attack=10,this.defence=40,this.isGoodCharacter=!0}}class d extends a{constructor(e){super(e,"swordsman"),this.attack=40,this.defence=10,this.isGoodCharacter=!0}}class m extends a{constructor(e){super(e,"undead"),this.attack=40,this.defence=10,this.isGoodCharacter=!1}}class u extends a{constructor(e){super(e,"vampire"),this.attack=25,this.defence=25,this.isGoodCharacter=!1}}class p{constructor(){this.playerTeam=[c,d,h],this.opponentTeam=[o,m,u]}}class C{constructor(e,t){this.playerTeam=e,this.opponentTeam=t}static from(e){return null}}const f=new t;f.bindToDOM(document.querySelector("#game-container"));const L=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),v=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.playerTeam=n((new p).playerTeam,1,3),this.opponentTeam=n((new p).opponentTeam,1,3),this.gameState=new C(this.playerTeam,this.opponentTeam)}init(){this.gamePlay.drawUi(s),this.gamePlay.redrawPositions([...this.playerTeam,...this.opponentTeam]),this.enterOnCell(),this.leaveOnCell(),this.clickOnCell()}onCellClick(e){if(this.gameState.selectedCharacter&&this.gameState.selectedCharacter.position===e)this.gamePlay.deselectCell(e),this.gameState.selectedCharacter=null;else{const s=this.hasCharacter(e),a=this.getCharacter(e);s?a.character.isGoodCharacter?(this.gameState.selectedCharacter=a,this.gamePlay.cells.forEach((e=>{e.classList.remove(...Array.from(e.classList).filter((e=>e.startsWith("selected"))))})),this.gamePlay.selectCell(e)):t.showMessage("Это игрок из чужой команды !!!"):t.showMessage("Это пустая клетка !!!")}}onCellEnter(e){const t=this.hasCharacter(e),s=this.getCharacter(e);if(t){const t=`🎖${s.character.level} 🗡${s.character.attack} 🛡${s.character.defence} 💓${s.character.health}`;this.gamePlay.showCellTooltip(t,e)}}onCellLeave(e){this.gamePlay.hideCellTooltip(e)}hasCharacter(e){return[...this.playerTeam,...this.opponentTeam].some((t=>t.position===e))}getCharacter(e){let t=this.playerTeam.find((t=>t.position===e));return t||(t=this.opponentTeam.find((t=>t.position===e))),t}enterOnCell(){this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this))}leaveOnCell(){this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this))}clickOnCell(){this.gamePlay.addCellClickListener(this.onCellClick.bind(this))}}(f,L);v.init()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,